{"ast":null,"code":"import _classCallCheck from \"/home/neilwadden/Programming/NeilWadden/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/neilwadden/Programming/NeilWadden/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/neilwadden/Programming/NeilWadden/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/neilwadden/Programming/NeilWadden/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/neilwadden/Programming/NeilWadden/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/neilwadden/Programming/NeilWadden/client/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from \"axios\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    _this.getDataFromDb = function () {\n      fetch(\"http://localhost:3001/api/getData\").then(function (data) {\n        return data.json();\n      }).then(function (res) {\n        return _this.setState({\n          data: res.data\n        });\n      });\n    };\n\n    _this.putDataToDB = function (message) {\n      var currentIds = _this.state.data.map(function (data) {\n        return data.id;\n      });\n\n      var idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post(\"http://localhost:3001/api/putData\", {\n        id: idToBeAdded,\n        message: message\n      });\n    };\n\n    _this.deleteFromDB = function (idToDelete) {\n      var objIdToDelete = null;\n\n      _this.state.data.forEach(function (dat) {\n        if (dat.id === idToDelete) {\n          objIdToDelete = dat._id;\n        }\n      });\n\n      axios.delete(\"http://localhost:3001/api/deleteData\", {\n        data: {\n          id: objIdToDelete\n        }\n      });\n    };\n\n    _this.updateDB = function (idToUpdate, updateToApply) {\n      var objIdToUpdate = null;\n\n      _this.state.data.forEach(function (dat) {\n        if (dat.id === idToUpdate) {\n          objIdToUpdate = dat._id;\n        }\n      });\n\n      axios.post(\"http://localhost:3001/api/updateData\", {\n        id: objIdToUpdate,\n        update: {\n          message: updateToApply\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getDataFromDb();\n\n      if (this.state.intervalIsSet) {\n        var interval = setInterval(this.getDataFromDb, 1000);\n        this.setState({\n          intervalIsSet: interval\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.state.intervalIsSet) {\n        clearInterval(this.state.intervalIsSet);\n        this.setState({\n          intervalIsSet: null\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var data = this.state.data;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/neilwadden/Programming/NeilWadden/client/src/App.js"],"names":["React","Component","axios","App","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","putDataToDB","currentIds","map","idToBeAdded","includes","post","deleteFromDB","objIdToDelete","forEach","dat","_id","delete","updateDB","updateToApply","objIdToUpdate","update","interval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from \"axios\";\n\nclass App extends Component {\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n  }\n\n  componentDidMount() {\n    this.getDataFromDb();\n    if (this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({intervalIsSet: interval});\n    }\n  }\n\n  componentWillUnmount() {\n\tif (this.state.intervalIsSet) {\n\t\tclearInterval(this.state.intervalIsSet);\n\t\tthis.setState({ intervalIsSet: null });\n\t}\n  }\n\n  getDataFromDb = () => {\n  \tfetch(\"http://localhost:3001/api/getData\")\n  \t\t.then(data => data.json())\n  \t\t.then(res => this.setState({ data: res.data }))\n  }\n\n  putDataToDB = message => {\n  \tlet currentIds = this.state.data.map(data => data.id);\n  \tlet idToBeAdded = 0;\n  \twhile (currentIds.includes(idToBeAdded)) {\n  \t\t++idToBeAdded;\n  \t}\n\n  \taxios.post(\"http://localhost:3001/api/putData\", {\n  \t\tid: idToBeAdded,\n  \t\tmessage: message,\n  \t});\n  };\n\n  deleteFromDB = idToDelete => {\n  \tlet objIdToDelete = null;\n  \tthis.state.data.forEach(dat => {\n  \t\tif (dat.id === idToDelete) {\n  \t\t\tobjIdToDelete = dat._id;\n  \t\t}\n  \t});\n\n  \taxios.delete(\"http://localhost:3001/api/deleteData\", {\n  \t\tdata: {\n  \t\t\tid: objIdToDelete,\n  \t\t}\n  \t});\n  }\n\n  updateDB = (idToUpdate, updateToApply) => {\n  \tlet objIdToUpdate = null;\n  \tthis.state.data.forEach(dat => {\n  \t\tif (dat.id === idToUpdate) {\n  \t\t\tobjIdToUpdate = dat._id\n  \t\t}\n  \t});\n\n  \taxios.post(\"http://localhost:3001/api/updateData\", {\n  \t\tid: objIdToUpdate,\n  \t\tupdate: { \n  \t\t\tmessage: updateToApply \n  \t\t}\n  \t});\n  }\n\n\n\n  render() {\n  \tconst { data } = this.state;\n    return (\n\t\t<div>\n\t\t\n\t\t</div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}